--- a/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
+++ b/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
@@ -81,32 +81,32 @@
     protected PerlinNoise(RandomSource random, Pair<Integer, DoubleList> firstOctaveAndAmplitudes, boolean xoroshiro) {
         this.firstOctave = firstOctaveAndAmplitudes.getFirst();
         this.amplitudes = firstOctaveAndAmplitudes.getSecond();
-        int size = this.amplitudes.size();
-        int i = -this.firstOctave;
-        this.noiseLevels = new ImprovedNoise[size];
+        int i = this.amplitudes.size();
+        int i1 = -this.firstOctave;
+        this.noiseLevels = new ImprovedNoise[i];
         if (xoroshiro) {
             PositionalRandomFactory positionalRandomFactory = random.forkPositional();
 
-            for(int i1 = 0; i1 < size; ++i1) {
-                if (this.amplitudes.getDouble(i1) != 0.0) {
-                    int i2 = this.firstOctave + i1;
-                    this.noiseLevels[i1] = new ImprovedNoise(positionalRandomFactory.fromHashOf("octave_" + i2));
+            for(int i2 = 0; i2 < i; ++i2) {
+                if (this.amplitudes.getDouble(i2) != 0.0) {
+                    int i3 = this.firstOctave + i2;
+                    this.noiseLevels[i2] = new ImprovedNoise(positionalRandomFactory.fromHashOf("octave_" + i3));
                 }
             }
         } else {
             ImprovedNoise improvedNoise = new ImprovedNoise(random);
-            if (i >= 0 && i < size) {
-                double d = this.amplitudes.getDouble(i);
+            if (i1 >= 0 && i1 < i) {
+                double d = this.amplitudes.getDouble(i1);
                 if (d != 0.0) {
-                    this.noiseLevels[i] = improvedNoise;
+                    this.noiseLevels[i1] = improvedNoise;
                 }
             }
 
-            for(int i1 = i - 1; i1 >= 0; --i1) {
-                if (i1 < size) {
-                    double d1 = this.amplitudes.getDouble(i1);
+            for(int i2 = i1 - 1; i2 >= 0; --i2) {
+                if (i2 < i) {
+                    double d1 = this.amplitudes.getDouble(i2);
                     if (d1 != 0.0) {
-                        this.noiseLevels[i1] = new ImprovedNoise(random);
+                        this.noiseLevels[i2] = new ImprovedNoise(random);
                     } else {
                         skipOctave(random);
                     }
@@ -119,13 +119,13 @@
                 throw new IllegalStateException("Failed to create correct number of noise levels for given non-zero amplitudes");
             }
 
-            if (i < size - 1) {
+            if (i1 < i - 1) {
                 throw new IllegalArgumentException("Positive octaves are temporarily disabled");
             }
         }
 
-        this.lowestFreqInputFactor = Math.pow(2.0, (double)(-i));
-        this.lowestFreqValueFactor = Math.pow(2.0, (double)(size - 1)) / (Math.pow(2.0, (double)size) - 1.0);
+        this.lowestFreqInputFactor = Math.pow(2.0, (double)(-i1));
+        this.lowestFreqValueFactor = Math.pow(2.0, (double)(i - 1)) / (Math.pow(2.0, (double)i) - 1.0);
         this.maxValue = this.edgeValue(2.0);
     }
 
