--- a/net/minecraft/world/level/levelgen/Heightmap.java
+++ b/net/minecraft/world/level/levelgen/Heightmap.java
@@ -36,26 +36,26 @@
     }
 
     public static void primeHeightmaps(ChunkAccess chunk, Set<Heightmap.Types> types) {
-        int size = types.size();
-        ObjectList<Heightmap> objectList = new ObjectArrayList<>(size);
+        int i = types.size();
+        ObjectList<Heightmap> objectList = new ObjectArrayList<>(i);
         ObjectListIterator<Heightmap> objectListIterator = objectList.iterator();
-        int i = chunk.getHighestSectionPosition() + 16;
+        int i1 = chunk.getHighestSectionPosition() + 16;
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
-        for(int i1 = 0; i1 < 16; ++i1) {
-            for(int i2 = 0; i2 < 16; ++i2) {
+        for(int i2 = 0; i2 < 16; ++i2) {
+            for(int i3 = 0; i3 < 16; ++i3) {
                 for(Heightmap.Types types1 : types) {
                     objectList.add(chunk.getOrCreateHeightmapUnprimed(types1));
                 }
 
-                for(int i3 = i - 1; i3 >= chunk.getMinBuildHeight(); --i3) {
-                    mutableBlockPos.set(i1, i3, i2);
+                for(int i4 = i1 - 1; i4 >= chunk.getMinBuildHeight(); --i4) {
+                    mutableBlockPos.set(i2, i4, i3);
                     BlockState blockState = chunk.getBlockState(mutableBlockPos);
                     if (!blockState.is(Blocks.AIR)) {
                         while(objectListIterator.hasNext()) {
                             Heightmap heightmap = objectListIterator.next();
                             if (heightmap.isOpaque.test(blockState)) {
-                                heightmap.setHeight(i1, i2, i3 + 1);
+                                heightmap.setHeight(i2, i3, i4 + 1);
                                 objectListIterator.remove();
                             }
                         }
@@ -64,7 +64,7 @@
                             break;
                         }
 
-                        objectListIterator.back(size);
+                        objectListIterator.back(i);
                     }
                 }
             }
