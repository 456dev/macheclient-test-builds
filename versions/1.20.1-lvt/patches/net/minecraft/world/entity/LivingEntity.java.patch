--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -2096,18 +2096,18 @@
                 float f = this.getXRot() * (float) (Math.PI / 180.0);
                 double d1 = Math.sqrt(lookAngle.x * lookAngle.x + lookAngle.z * lookAngle.z);
                 double deltaMovement1 = y1.horizontalDistance();
-                double len = lookAngle.length();
-                double d2 = Math.cos((double)f);
-                double var35 = d2 * d2 * Math.min(1.0, len / 0.4);
+                double d2 = lookAngle.length();
+                double d3 = Math.cos((double)f);
+                double var35 = d3 * d3 * Math.min(1.0, d2 / 0.4);
                 Vec3 var22 = this.getDeltaMovement().add(0.0, d * (-1.0 + var35 * 0.75), 0.0);
                 if (var22.y < 0.0 && d1 > 0.0) {
-                    double d3 = var22.y * -0.1 * var35;
-                    var22 = var22.add(lookAngle.x * d3 / d1, d3, lookAngle.z * d3 / d1);
+                    double d4 = var22.y * -0.1 * var35;
+                    var22 = var22.add(lookAngle.x * d4 / d1, d4, lookAngle.z * d4 / d1);
                 }
 
                 if (f < 0.0F && d1 > 0.0) {
-                    double d3 = deltaMovement1 * (double)(-Mth.sin(f)) * 0.04;
-                    var22 = var22.add(-lookAngle.x * d3 / d1, d3 * 3.2, -lookAngle.z * d3 / d1);
+                    double d4 = deltaMovement1 * (double)(-Mth.sin(f)) * 0.04;
+                    var22 = var22.add(-lookAngle.x * d4 / d1, d4 * 3.2, -lookAngle.z * d4 / d1);
                 }
 
                 if (d1 > 0.0) {
@@ -2117,9 +2117,9 @@
                 this.setDeltaMovement(var22.multiply(0.99F, 0.98F, 0.99F));
                 this.move(MoverType.SELF, this.getDeltaMovement());
                 if (this.horizontalCollision && !this.level().isClientSide) {
-                    double d3 = this.getDeltaMovement().horizontalDistance();
-                    double d4 = deltaMovement1 - d3;
-                    float f3 = (float)(d4 * 10.0 - 3.0);
+                    double d4 = this.getDeltaMovement().horizontalDistance();
+                    double d5 = deltaMovement1 - d4;
+                    float f3 = (float)(d5 * 10.0 - 3.0);
                     if (f3 > 0.0F) {
                         this.playSound(this.getFallDamageSound((int)f3), 1.0F, 1.0F);
                         this.hurt(this.damageSources().flyIntoWall(), f3);
@@ -2134,23 +2134,23 @@
                 float lookAngle1 = this.level().getBlockState(y2).getBlock().getFriction();
                 float f = this.onGround() ? lookAngle1 * 0.91F : 0.91F;
                 Vec3 vec31 = this.handleRelativeFrictionAndCalculateMovement(movementInput, lookAngle1);
-                double d5 = vec31.y;
+                double d6 = vec31.y;
                 if (this.hasEffect(MobEffects.LEVITATION)) {
-                    d5 += (0.05 * (double)(this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - vec31.y) * 0.2;
+                    d6 += (0.05 * (double)(this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - vec31.y) * 0.2;
                 } else if (this.level().isClientSide && !this.level().hasChunkAt(y2)) {
                     if (this.getY() > (double)this.level().getMinBuildHeight()) {
-                        d5 = -0.1;
+                        d6 = -0.1;
                     } else {
-                        d5 = 0.0;
+                        d6 = 0.0;
                     }
                 } else if (!this.isNoGravity()) {
-                    d5 -= d;
+                    d6 -= d;
                 }
 
                 if (this.shouldDiscardFriction()) {
-                    this.setDeltaMovement(vec31.x, d5, vec31.z);
+                    this.setDeltaMovement(vec31.x, d6, vec31.z);
                 } else {
-                    this.setDeltaMovement(vec31.x * (double)f, d5 * 0.98F, vec31.z * (double)f);
+                    this.setDeltaMovement(vec31.x * (double)f, d6 * 0.98F, vec31.z * (double)f);
                 }
             }
         }
