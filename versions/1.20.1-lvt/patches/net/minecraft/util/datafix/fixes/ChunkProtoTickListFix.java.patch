--- a/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
+++ b/net/minecraft/util/datafix/fixes/ChunkProtoTickListFix.java
@@ -100,7 +100,7 @@
                                         )
                             );
                         byte b = mutableInt.getValue().byteValue();
-                        Typed var18 = typed1.update(DSL.remainderFinder(), dynamic3 -> dynamic3.update("yPos", dynamic4 -> dynamic4.createByte(b)));
+                        Typed<?> var18 = typed1.update(DSL.remainderFinder(), dynamic3 -> dynamic3.update("yPos", dynamic4 -> dynamic4.createByte(b)));
                         if (!var18.getOptionalTyped(opticFinder6).isPresent() && !dynamic.get("fluid_ticks").result().isPresent()) {
                             int _int = dynamic.get("xPos").asInt(0);
                             int _int1 = dynamic.get("zPos").asInt(0);
@@ -110,7 +110,7 @@
                             Dynamic<?> dynamic2 = this.makeTickList(dynamic, int2ObjectMap, b, _int, _int1, "ToBeTicked", ChunkProtoTickListFix::getBlock);
                             Optional<? extends Pair<? extends Typed<?>, ?>> optional = opticFinder6.type().readTyped(dynamic2).result();
                             if (optional.isPresent()) {
-                                var18 = var18.set(opticFinder6, ((Pair)optional.get()).getFirst());
+                                var18 = var18.set(opticFinder6, (optional.get()).getFirst());
                             }
         
                             return var18.update(
@@ -185,7 +185,7 @@
         int i6 = i3 >>> 8 & 15;
         String string = function.apply(supplier != null ? supplier.get().get(i4, i5, i6) : null);
         return dynamic.createMap(
-            ImmutableMap.builder()
+            ImmutableMap.<Dynamic<?>, Dynamic<?>>builder()
                 .put(dynamic.createString("i"), dynamic.createString(string))
                 .put(dynamic.createString("x"), dynamic.createInt(i * 16 + i4))
                 .put(dynamic.createString("y"), dynamic.createInt(i1 * 16 + i5))
