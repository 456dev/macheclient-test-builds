--- a/net/minecraft/util/StringDecomposer.java
+++ b/net/minecraft/util/StringDecomposer.java
@@ -14,29 +14,29 @@
     }
 
     public static boolean iterate(String text, Style style, FormattedCharSink visitor) {
-        int len = text.length();
+        int i = text.length();
 
-        for(int i = 0; i < len; ++i) {
-            char c = text.charAt(i);
+        for(int i1 = 0; i1 < i; ++i1) {
+            char c = text.charAt(i1);
             if (Character.isHighSurrogate(c)) {
-                if (i + 1 >= len) {
-                    if (!visitor.accept(i, style, 65533)) {
+                if (i1 + 1 >= i) {
+                    if (!visitor.accept(i1, style, 65533)) {
                         return false;
                     }
                     break;
                 }
 
-                char c1 = text.charAt(i + 1);
+                char c1 = text.charAt(i1 + 1);
                 if (Character.isLowSurrogate(c1)) {
-                    if (!visitor.accept(i, style, Character.toCodePoint(c, c1))) {
+                    if (!visitor.accept(i1, style, Character.toCodePoint(c, c1))) {
                         return false;
                     }
 
-                    ++i;
-                } else if (!visitor.accept(i, style, 65533)) {
+                    ++i1;
+                } else if (!visitor.accept(i1, style, 65533)) {
                     return false;
                 }
-            } else if (!feedChar(style, visitor, i, c)) {
+            } else if (!feedChar(style, visitor, i1, c)) {
                 return false;
             }
         }
@@ -45,27 +45,27 @@
     }
 
     public static boolean iterateBackwards(String text, Style style, FormattedCharSink visitor) {
-        int len = text.length();
+        int i = text.length();
 
-        for(int i = len - 1; i >= 0; --i) {
-            char c = text.charAt(i);
+        for(int i1 = i - 1; i1 >= 0; --i1) {
+            char c = text.charAt(i1);
             if (Character.isLowSurrogate(c)) {
-                if (i - 1 < 0) {
+                if (i1 - 1 < 0) {
                     if (!visitor.accept(0, style, 65533)) {
                         return false;
                     }
                     break;
                 }
 
-                char c1 = text.charAt(i - 1);
+                char c1 = text.charAt(i1 - 1);
                 if (Character.isHighSurrogate(c1)) {
-                    if (!visitor.accept(--i, style, Character.toCodePoint(c1, c))) {
+                    if (!visitor.accept(--i1, style, Character.toCodePoint(c1, c))) {
                         return false;
                     }
-                } else if (!visitor.accept(i, style, 65533)) {
+                } else if (!visitor.accept(i1, style, 65533)) {
                     return false;
                 }
-            } else if (!feedChar(style, visitor, i, c)) {
+            } else if (!feedChar(style, visitor, i1, c)) {
                 return false;
             }
         }
@@ -82,42 +82,42 @@
     }
 
     public static boolean iterateFormatted(String text, int startIndex, Style startingStyle, Style resetStyle, FormattedCharSink visitor) {
-        int len = text.length();
+        int i = text.length();
         Style style = startingStyle;
 
-        for(int i = startIndex; i < len; ++i) {
-            char c = text.charAt(i);
+        for(int i1 = startIndex; i1 < i; ++i1) {
+            char c = text.charAt(i1);
             if (c == 167) {
-                if (i + 1 >= len) {
+                if (i1 + 1 >= i) {
                     break;
                 }
 
-                char c1 = text.charAt(i + 1);
+                char c1 = text.charAt(i1 + 1);
                 ChatFormatting byCode = ChatFormatting.getByCode(c1);
                 if (byCode != null) {
                     style = byCode == ChatFormatting.RESET ? resetStyle : style.applyLegacyFormat(byCode);
                 }
 
-                ++i;
+                ++i1;
             } else if (Character.isHighSurrogate(c)) {
-                if (i + 1 >= len) {
-                    if (!visitor.accept(i, style, 65533)) {
+                if (i1 + 1 >= i) {
+                    if (!visitor.accept(i1, style, 65533)) {
                         return false;
                     }
                     break;
                 }
 
-                char c1 = text.charAt(i + 1);
+                char c1 = text.charAt(i1 + 1);
                 if (Character.isLowSurrogate(c1)) {
-                    if (!visitor.accept(i, style, Character.toCodePoint(c, c1))) {
+                    if (!visitor.accept(i1, style, Character.toCodePoint(c, c1))) {
                         return false;
                     }
 
-                    ++i;
-                } else if (!visitor.accept(i, style, 65533)) {
+                    ++i1;
+                } else if (!visitor.accept(i1, style, 65533)) {
                     return false;
                 }
-            } else if (!feedChar(style, visitor, i, c)) {
+            } else if (!feedChar(style, visitor, i1, c)) {
                 return false;
             }
         }
