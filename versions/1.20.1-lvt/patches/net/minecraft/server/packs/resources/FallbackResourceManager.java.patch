--- a/net/minecraft/server/packs/resources/FallbackResourceManager.java
+++ b/net/minecraft/server/packs/resources/FallbackResourceManager.java
@@ -156,22 +156,22 @@
 
         Map<ResourceLocation, ResourceWithSourceAndIndex> map = new HashMap<>();
         Map<ResourceLocation, ResourceWithSourceAndIndex> map1 = new HashMap<>();
-        int size = this.fallbacks.size();
+        int i = this.fallbacks.size();
 
-        for(int i = 0; i < size; ++i) {
-            FallbackResourceManager.PackEntry packEntry = this.fallbacks.get(i);
+        for(int i1 = 0; i1 < i; ++i1) {
+            FallbackResourceManager.PackEntry packEntry = this.fallbacks.get(i1);
             packEntry.filterAll(map.keySet());
             packEntry.filterAll(map1.keySet());
             PackResources packResources = packEntry.resources;
             if (packResources != null) {
-                int i1 = i;
+                int i2 = i1;
                 packResources.listResources(this.type, this.namespace, startingPath, (id, supplier) -> {
                     if (isMetadata(id)) {
                         if (allowedPathPredicate.test(getResourceLocationFromMetadata(id))) {
-                            map1.put(id, new ResourceWithSourceAndIndex(packResources, supplier, i1));
+                            map1.put(id, new ResourceWithSourceAndIndex(packResources, supplier, i2));
                         }
                     } else if (allowedPathPredicate.test(id)) {
-                        map.put(id, new ResourceWithSourceAndIndex(packResources, supplier, i1));
+                        map.put(id, new ResourceWithSourceAndIndex(packResources, supplier, i2));
                     }
                 });
             }
